name: Code Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate code coverage
      run: |
        cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info
        cargo llvm-cov report --html --output-dir coverage-html

    - name: Upload coverage reports to Codecov (with token)
      if: ${{ secrets.CODECOV_TOKEN != '' }}
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage reports to Codecov
      if: ${{ secrets.CODECOV_TOKEN == '' }}
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false
        verbose: true

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-html/

    - name: Coverage Summary
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        cargo llvm-cov report --summary-only >> $GITHUB_STEP_SUMMARY

    - name: Check coverage threshold
      shell: bash
      run: |
        set -euo pipefail
        COVERAGE=$(cargo llvm-cov report --summary-only | awk '/TOTAL/ {print $(NF-1)}' | tr -d '%')
        echo "Current coverage: ${COVERAGE}%"
        THRESHOLD=80.0
        awk -v cov="$COVERAGE" -v thr="$THRESHOLD" 'BEGIN { if (cov+0 < thr+0) { exit 1 } }' || { echo "❌ Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"; exit 1; }
        echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"

  coverage-differential:
    name: Differential Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Generate coverage for PR
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path pr-coverage.info

    - name: Checkout base branch
      run: |
        git checkout ${{ github.base_ref }}

    - name: Generate coverage for base
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path base-coverage.info

    - name: Compare coverage
      run: |
        # This is a simplified comparison - in practice you'd use a more sophisticated tool
        echo "## Coverage Comparison" >> $GITHUB_STEP_SUMMARY
        echo "Base coverage:" >> $GITHUB_STEP_SUMMARY
        cargo llvm-cov report --summary-only >> $GITHUB_STEP_SUMMARY
        
        git checkout ${{ github.head_ref }}
        echo "PR coverage:" >> $GITHUB_STEP_SUMMARY
        cargo llvm-cov report --summary-only >> $GITHUB_STEP_SUMMARY